import React from 'react'
import './LoginPopup.css'
import { assets } from '../../assets/assets'
import { useState } from 'react'
import { useContext } from 'react'
import { StoreContext } from '../../Context/Storecontext'
import axios from 'axios';
import { useNavigate } from 'react-router-dom';



const LoginPopup = ({ setShowLogin }) => {

  const navigate = useNavigate();
  //using the url that we have stored in the storeContext
  const { url, setToken } = useContext(StoreContext);
  const [currtState, setCurrState] = useState("login")
  // setting the inputs filds as set in bakend for user so we can store the data from frontedns
  //of the user to the bakend
  const [data, setData] = useState({
    name: "",
    email: "",
    password: ""
  })
  //creating onchange function for input fields
  const onChangeHandler = (event) => {
    const name = event.target.name;
    const value = event.target.value;
    setData(data => ({ ...data, [name]: value }))
  }

  const onLogin = async (event) => {
    //to prevent the bahaviour of forms on sumit so the page does not get reloaded
    event.preventDefault();
    let newurl = url;
    if (currtState === "login") {
      newurl += "/api/user/login"
    }
    else {
      newurl += "/api/user/register"
    }

    const response = await axios.post(newurl, data);
    if (response.data.success) {
      //setting the token
      setToken(response.data.token);
      //storing the token generated by bakend in our localstorage
      localStorage.setItem("token", response.data.token);
      //"Note: Token is stored in LocalStorage for simplicity. In a production app, I would use HttpOnly cookies to improve security ."

      if (response.data.role === "admin") {
        // redirect to admin app (separate folder on different port or domain)
        window.location.href = " https://food-delivery-website-admin-evkq.onrender.com"; // change this to your actual admin URL
      } else {
        navigate("/");
      }

      setShowLogin(false);
    }
    else {
      alert(response.data.message);
    }

  }






  return (
    <div className='login-popup'>
      <form onSubmit={onLogin} className='login-popup-container'>
        <div className='login-popup-tittle'>
          <h2>{currtState}</h2>
          <img onClick={() => setShowLogin(false)} src={assets.cross_icon} />
        </div>

        <div className='login-popup-inputs'>
          {currtState === "login" ? <></> : <input name='name' onChange={onChangeHandler} value={data.name} type='text' placeholder='your name' required></input>}

          <input name='email' onChange={onChangeHandler} value={data.email} type='email' placeholder='your email' required></input>
          <input name='password' onChange={onChangeHandler} value={data.password} type='password' placeholder='password' required></input>
        </div>
        <button type='submit'>{currtState === "signup" ? "create Acount" : "login"}</button>
        <div className='login-popup-condition'>
          <input type='checkbox' required />
          <p>By continuing, I agrre to the terms of use and privacy policy</p>
        </div>
        {currtState === "login"
          ? <p>create a new account? <span onClick={() => setCurrState("signup")}>Click Here</span></p>
          : <p>Already have a acount? <span onClick={() => setCurrState("login")}>Login Here</span></p>}

      </form>
    </div>
  )
}

export default LoginPopup
